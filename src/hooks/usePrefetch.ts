import { useEffect } from "react";
import { cacheUtils } from "@/lib/cache";

// Hook para prefetch de dados principais
export const usePrefetch = () => {
  const prefetchMainData = async () => {
    try {
      console.log("üöÄ Iniciando prefetch de dados principais...");

      // Prefetch de dados em paralelo
      const prefetchPromises = [
        // Dashboard stats
        cacheUtils.getCachedData("dashboard:stats", async () => {
          // Esta fun√ß√£o ser√° chamada apenas se n√£o estiver em cache
          console.log("üìä Prefetching dashboard stats...");
          return null; // Placeholder - ser√° preenchido quando acessado
        }),

        // Appointments today
        cacheUtils.getCachedData("appointments:today", async () => {
          console.log("üìÖ Prefetching appointments today...");
          return null;
        }),

        // Services list
        cacheUtils.getCachedData("services:list", async () => {
          console.log("üîß Prefetching services list...");
          return null;
        }),

        // Employees list
        cacheUtils.getCachedData("employees:list", async () => {
          console.log("üë• Prefetching employees list...");
          return null;
        }),

        // Active employees
        cacheUtils.getCachedData("employees:active", async () => {
          console.log("‚úÖ Prefetching active employees...");
          return null;
        }),
      ];

      await Promise.allSettled(prefetchPromises);
      console.log("‚úÖ Prefetch conclu√≠do com sucesso!");
    } catch (error) {
      console.error("‚ùå Erro durante prefetch:", error);
    }
  };

  // Prefetch autom√°tico ap√≥s login
  useEffect(() => {
    // Verificar se o usu√°rio est√° logado
    const token = localStorage.getItem("auth_token");
    if (token) {
      prefetchMainData();
    }
  }, []);

  return {
    prefetchMainData,
  };
};

// Hook para prefetch espec√≠fico por p√°gina
export const usePagePrefetch = (
  pageType: "dashboard" | "appointments" | "services" | "employees" | "clients"
) => {
  const prefetchPageData = async () => {
    try {
      console.log(`üöÄ Prefetching dados para p√°gina: ${pageType}`);

      switch (pageType) {
        case "dashboard":
          await Promise.allSettled([
            cacheUtils.getCachedData("dashboard:stats", async () => null),
            cacheUtils.getCachedData(
              "dashboard:appointment-stats",
              async () => null
            ),
            cacheUtils.getCachedData("appointments:today", async () => null),
          ]);
          break;

        case "appointments":
          await Promise.allSettled([
            cacheUtils.getCachedData("appointments:all", async () => null),
            cacheUtils.getCachedData("appointments:today", async () => null),
          ]);
          break;

        case "services":
          await Promise.allSettled([
            cacheUtils.getCachedData("services:list", async () => null),
          ]);
          break;

        case "employees":
          await Promise.allSettled([
            cacheUtils.getCachedData("employees:list", async () => null),
            cacheUtils.getCachedData("employees:active", async () => null),
          ]);
          break;

        case "clients":
          await Promise.allSettled([
            cacheUtils.getCachedData("clients:list", async () => null),
          ]);
          break;
      }

      console.log(`‚úÖ Prefetch para ${pageType} conclu√≠do!`);
    } catch (error) {
      console.error(`‚ùå Erro durante prefetch de ${pageType}:`, error);
    }
  };

  return {
    prefetchPageData,
  };
};
